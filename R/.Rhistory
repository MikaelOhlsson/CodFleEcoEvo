mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(y = GN, x = as.factor(marginal), fill = as.factor(group)) +
geom_tile() +
facet_wrap(N~marginal, scales = "free", ncol = 5) +
scale_fill_brewer(palette = "Accent") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank()) +
labs(x = "species", fill = "group", title = "Random networks with C = 0.086")
randomdf %>%
filter(N == 100 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(y = species, x = as.factor(marginal), fill = as.factor(group)) +
geom_tile() +
facet_wrap(N~marginal, scales = "free", ncol = 5) +
scale_fill_brewer(palette = "Accent") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank()) +
labs(x = "species", fill = "group", title = "Random networks with C = 0.086")
LETTERS702 <- c(LETTERS, sapply(LETTERS, function(x) paste0(x, LETTERS))) # "Species names"
randomdf <- list.files("../data/random/", pattern = "*.txt-G")  %>%
as_tibble() %>%
# separate(col = value, into = c("run", "marginal"),
#          sep = "Marginal", remove = F) %>%
#group_by(run) %>%
#summarise(marginal = max(marginal)) %>% #If a single iteration has multiple runs, select the grouping with highest marginal likelihood
#ungroup() %>%
# transmute(run = paste0(run, "Marginal", marginal)) %>%
separate(col = value, into = c("N", "rest"),
sep = c("_c"), remove = F) %>%
mutate(N = as.numeric(substr(N, 2,4))) %>%
separate(col = rest, into = c("c", "rest"),
sep = c("_i")) %>%
separate(col = rest, into = c("iter", "marginal"),
sep = c(".txt-G-20-DC-0-alpha-NA-beta-NA-Marginal")) %>%
mutate(iter = as.numeric(iter),
marginal = as.numeric(marginal)) %>%
mutate(group = map(value, fetchrand)) %>%
unnest(group) %>%
group_by(N,iter) %>%
mutate(species = LETTERS702[1:n()]) %>%
ungroup() %>%
separate(value, sep = "-G-20", c("filename","junk")) %>%
dplyr::select(-junk)
randomdf %>%
filter(N == 100 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(y = species, x = as.factor(marginal), fill = as.factor(group)) +
geom_tile() +
facet_wrap(N~marginal, scales = "free", ncol = 5) +
scale_fill_brewer(palette = "Accent") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank()) +
labs(x = "species", fill = "group", title = "Random networks with C = 0.086")
randomdf <- list.files("../data/random/", pattern = "*.txt-G")  %>%
as_tibble() %>%
# separate(col = value, into = c("run", "marginal"),
#          sep = "Marginal", remove = F) %>%
#group_by(run) %>%
#summarise(marginal = max(marginal)) %>% #If a single iteration has multiple runs, select the grouping with highest marginal likelihood
#ungroup() %>%
# transmute(run = paste0(run, "Marginal", marginal)) %>%
separate(col = value, into = c("N", "rest"),
sep = c("_c"), remove = F) %>%
mutate(N = as.numeric(substr(N, 2,4))) %>%
separate(col = rest, into = c("c", "rest"),
sep = c("_i")) %>%
separate(col = rest, into = c("iter", "marginal"),
sep = c(".txt-G-20-DC-0-alpha-NA-beta-NA-Marginal")) %>%
mutate(iter = as.numeric(iter),
marginal = as.numeric(marginal)) %>%
mutate(group = map(value, fetchrand)) %>%
unnest(group) %>%
group_by(N,iter,marginal) %>%
mutate(species = LETTERS702[1:n()]) %>%
ungroup() %>%
separate(value, sep = "-G-20", c("filename","junk")) %>%
dplyr::select(-junk)
randomdf %>%
filter(N == 100 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(y = species, x = as.factor(marginal), fill = as.factor(group)) +
geom_tile() +
facet_wrap(N~marginal, scales = "free", ncol = 5) +
scale_fill_brewer(palette = "Accent") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank()) +
labs(x = "species", fill = "group", title = "Random networks with C = 0.086")
284*24
315*24
x <- 1:10
df <- data.frame(x)
ggplot(df, aes(x)) + stat_function(fun=function(x) (1/(1+exp(-x))))
x <- -10:10
df <- data.frame(x)
ggplot(df, aes(x)) + stat_function(fun=function(x) (1/(1+exp(-x))))
ggplot(df, aes(x)) + stat_function(fun=function(x) (5/(1+exp(-x))))
ggplot(df, aes(x)) + stat_function(fun=function(x) (1/(3+exp(-x))))
ggplot(df, aes(x)) + stat_function(fun=function(x) (0.1/(3+exp(-x))))
ggplot(df, aes(x)) + stat_function(fun=function(x) (1/(-1+exp(-x))))
ggplot(df, aes(x)) + stat_function(fun=function(x) (1/(0.1+exp(-x))))
ggplot(df, aes(x)) + stat_function(fun=function(x) (1/(1+exp(-x))))
ggplot(df, aes(x)) + stat_function(fun=function(x) (1/(0.5+exp(-x))))
ggplot(df, aes(x)) + stat_function(fun=function(x) (1/(0.5+exp(-2x))))
ggplot(df, aes(x)) + stat_function(fun=function(x) (1/(0.5+exp(-2*x))))
x <- -6:6
df <- data.frame(x)
ggplot(df, aes(x)) + stat_function(fun=function(x) (1/(0.5+exp(-2*x))))
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(y = species, x = as.factor(marginal), fill = as.factor(group)) +
geom_tile() +
facet_wrap(N~marginal, scales = "free", ncol = 5) +
scale_fill_brewer(palette = "Accent") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank()) +
labs(x = "species", fill = "group", title = "Random networks with C = 0.086")
randomdf <- list.files("../data/random/", pattern = "*.txt-G")  %>%
as_tibble() %>%
# separate(col = value, into = c("run", "marginal"),
#          sep = "Marginal", remove = F) %>%
#group_by(run) %>%
#summarise(marginal = max(marginal)) %>% #If a single iteration has multiple runs, select the grouping with highest marginal likelihood
#ungroup() %>%
# transmute(run = paste0(run, "Marginal", marginal)) %>%
separate(col = value, into = c("N", "rest"),
sep = c("_c"), remove = F) %>%
mutate(N = as.numeric(substr(N, 2,4))) %>%
separate(col = rest, into = c("c", "rest"),
sep = c("_i")) %>%
separate(col = rest, into = c("iter", "marginal"),
sep = c(".txt-G-20-DC-0-alpha-NA-beta-NA-Marginal")) %>%
mutate(iter = as.numeric(iter),
marginal = as.numeric(marginal)) %>%
mutate(group = map(value, fetchrand)) %>%
unnest(group) %>%
group_by(N,iter,marginal) %>%
mutate(species = LETTERS702[1:n()]) %>%
ungroup() %>%
separate(value, sep = "-G-20", c("filename","junk")) %>%
dplyr::select(-junk)
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(y = species, x = as.factor(marginal), fill = as.factor(group)) +
geom_tile() +
facet_wrap(N~marginal, scales = "free", ncol = 5) +
scale_fill_brewer(palette = "Accent") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank()) +
labs(x = "species", fill = "group", title = "Random networks with C = 0.086")
randomdf <- list.files("../data/random/", pattern = "*.txt-G")  %>%
as_tibble() %>%
# separate(col = value, into = c("run", "marginal"),
#          sep = "Marginal", remove = F) %>%
#group_by(run) %>%
#summarise(marginal = max(marginal)) %>% #If a single iteration has multiple runs, select the grouping with highest marginal likelihood
#ungroup() %>%
# transmute(run = paste0(run, "Marginal", marginal)) %>%
separate(col = value, into = c("N", "rest"),
sep = c("_c"), remove = F) %>%
mutate(N = as.numeric(substr(N, 2,4))) %>%
separate(col = rest, into = c("c", "rest"),
sep = c("_i")) %>%
separate(col = rest, into = c("iter", "marginal"),
sep = c(".txt-G-20-DC-0-alpha-NA-beta-NA-Marginal")) %>%
mutate(iter = as.numeric(iter),
marginal = as.numeric(marginal)) %>%
mutate(group = map(value, fetchrand)) %>%
unnest(group) %>%
group_by(N,iter,marginal) %>%
mutate(species = LETTERS702[1:n()]) %>%
ungroup() %>%
separate(value, sep = "-G-20", c("filename","junk")) %>%
dplyr::select(-junk)
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(y = species, x = as.factor(marginal), fill = as.factor(group)) +
geom_tile() +
facet_wrap(N~marginal, scales = "free", ncol = 5) +
scale_fill_brewer(palette = "Accent") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank()) +
labs(x = "species", fill = "group", title = "Random networks with C = 0.086")
install.packages("ggalluvial")
library(ggalluvial)
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(y = species, x = as.factor(marginal)) +
geom_alluvium(aes(fill = as.factor(group))) +
geom_stratum()
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = species, x = as.factor(marginal)) +
geom_alluvium(aes(fill = as.factor(group))) +
geom_stratum()
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = as.factor(species), x = as.factor(marginal), alluvium = species, fill = as.factor(group)) +
geom_alluvium() +
geom_stratum()
randomdf %>%
filter(N == 100 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = as.factor(species), x = as.factor(marginal), alluvium = species, fill = as.factor(group)) +
geom_alluvium() +
geom_stratum()
randomdf %>%
filter(N == 100 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = as.factor(group), x = as.factor(marginal), alluvium = species, fill = as.factor(group)) +
geom_alluvium() +
geom_stratum()
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = as.factor(group), x = as.factor(marginal), alluvium = species, fill = as.factor(group)) +
geom_alluvium() +
geom_stratum()
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = as.factor(group), x = as.factor(marginal), alluvium = species, fill = as.factor(group)) +
geom_flow() +
#geom_alluvium() +
geom_stratum()
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = as.factor(group), x = as.factor(marginal), alluvium = species, fill = as.factor(group)) +
geom_flow() +
#geom_alluvium() +
geom_stratum(reverse=F)
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = as.factor(group), x = as.factor(marginal), alluvium = species, fill = as.factor(group)) +
geom_flow(reverse=F) +
#geom_alluvium() +
geom_stratum(reverse=F)
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = as.factor(group), x = as.factor(marginal), alluvium = species, fill = as.factor(group)) +
geom_flow(reverse=F) +
guides(fill = guide_legend(reverse = T)) +
#geom_alluvium() +
geom_stratum(reverse=F)
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = as.factor(group), x = as.factor(marginal), alluvium = species, fill = as.factor(group)) +
geom_flow(reverse=F, position = "identity") +
guides(fill = guide_legend(reverse = T)) +
geom_stratum(reverse=F)
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(stratum = as.factor(group), x = as.factor(marginal), alluvium = species, fill = as.factor(group)) +
geom_flow(reverse=F, position = "identity", stat = "alluvium") +
guides(fill = guide_legend(reverse = T)) +
geom_stratum(reverse=F)
tibble(x = -6:6)
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(1/1+exp(x)))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/1+exp(x)))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/x+exp(x)))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/1+exp(x)))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/1+exp(1+x)))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/1+exp(-x)))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(1+exp(-x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(1+exp(-2x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(1+exp(-2*x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(2+exp(-2*x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(-2+exp(-2*x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(0.5+exp(-2*x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(0.25+exp(-2*x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(0.25+exp(-x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(1+exp(-x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (0.25/(1+exp(-x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(1+0.25*exp(-x))))
tibble(x = -6:6) %>%
ggplot(aes(x)) +
stat_function(fun=function(x) (1/(0.25+exp(-x))))
setwd("~/master/CodFleEcoEvo/R")
setwd("~/master/91167/CodFleEcoEvo/R")
setwd("~/master/CodFleEcoEvo/R")
ggplot(alludf, aes(x=as.factor(.r), stratum=as.factor(group), alluvium=species, fill=as.factor(group), label = as.factor(group))) +
geom_flow(stat="alluvium", position="identity", reverse=F, lode.guidance="rightward") + #aes.flow="forward", aes.bind=T,
geom_stratum(reverse=F, width = 1/3) +
#  geom_text_repel(stat = "stratum", reverse=F, nudge_x = -0.5) +
theme_classic() +
scale_x_discrete(name=NULL, labels=c("Similar", "Original", "Differing"), expand=c(0.2,0)) +
scale_y_discrete(labels=alludf$species, name="Species") +
scale_fill_manual(name="Group", values = c(brewer.pal(name="Paired", n = 8), brewer.pal(name="Dark2", n = 8))[1:16]) + #palette="Paired",
theme(axis.text.y = element_text(vjust=1),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
axis.line.y = element_blank()) +
guides(fill = guide_legend(reverse=TRUE)) +
labs(title = paste0("Original ", alludf[[1,1]], " vs. 10% reduced links"))
randomdf
randomdf %>%
filter(N == 200 & iter == 1) %>%
mutate(GN = paste0(group,"_",species)) %>%
ggplot() +
aes(y = species, x = as.factor(marginal), fill = as.factor(group)) +
geom_tile() +
facet_wrap(N~marginal, scales = "free", ncol = 5) +
scale_fill_brewer(palette = "Accent") +
theme(axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title.y = element_blank()) +
labs(x = "species", fill = "group", title = "Random networks with C = 0.086")
randomdf
compare_df <- randomdf %>%
filter(iter == 1)
#Checking which species are present in the best fitting groups
checksp <- function(m, s){
compare_df %>%
filter(species %in% unlist(s)) %>%
group_by(marginal) %>%
count(group) %>%
filter(n == max(n)) %>%
group_by(marginal) %>%
slice(1) %>% #Pick one iteration in case of multiple iterations with the same group structure
ungroup() %>%
left_join(dplyr::select(compare_df, marginal, group, species),
by = c("web", "frac", "iter", "group")) %>%
group_by(marginal, group, n) %>%
nest() %>%
rename(species = data) %>%
return()
}
compare_df
compare_df %>% #filter(web == "stmks") %>%
group_by(marginal, group) %>%
nest() %>% #Nest species
rename(sp = data) %>%
ungroup()
compare_df %>% #filter(web == "stmks") %>%
group_by(marginal, group) %>%
nest() %>% #Nest species
rename(sp = data) %>%
ungroup() %>%
mutate(sp.best = pmap(list(marginal, sp), checksp)) %>%
unnest(sp.best, names_sep = "_")
compare_df %>%
filter(species %in% unlist(s)) %>%
group_by(marginal) %>%
count(group) %>%
filter(n == max(n)) %>%
group_by(marginal) %>%
slice(1) %>% #Pick one iteration in case of multiple iterations with the same group structure
ungroup() %>%
left_join(dplyr::select(compare_df, marginal, group, species),
by = c("marginal", "group")) %>%
group_by(marginal, group, n) %>%
nest() %>%
rename(species = data) %>%
return()
#Checking which species are present in the best fitting groups
checksp <- function(m, s){
compare_df %>%
filter(species %in% unlist(s)) %>%
group_by(marginal) %>%
count(group) %>%
filter(n == max(n)) %>%
group_by(marginal) %>%
slice(1) %>% #Pick one iteration in case of multiple iterations with the same group structure
ungroup() %>%
left_join(dplyr::select(compare_df, marginal, group, species),
by = c("marginal", "group")) %>%
group_by(marginal, group, n) %>%
nest() %>%
rename(species = data) %>%
return()
}
compare_df %>% #filter(web == "stmks") %>%
group_by(marginal, group) %>%
nest() %>% #Nest species
rename(sp = data) %>%
ungroup() %>%
mutate(sp.best = pmap(list(marginal, sp), checksp)) %>%
unnest(sp.best, names_sep = "_")
t1 <- Sys.time()
J_tmp <- compare_df %>% #filter(web == "stmks") %>%
group_by(marginal, group) %>%
nest() %>% #Nest species
rename(sp = data) %>%
ungroup() %>%
mutate(sp.best = pmap(list(marginal, sp), checksp)) %>%
unnest(sp.best, names_sep = "_") %>%
rowwise() %>%
mutate(sp.union = list(union(unlist(sp), unlist(sp.best_species)))) %>%
mutate(J_group = sp.best_n / length(sp.union)) %>%
ungroup() %>%
rename(ix = iter, iy = sp.best_iter,
mx = marginal, Js = J_group)
compare_df %>% #filter(web == "stmks") %>%
group_by(marginal, group) %>%
nest() %>% #Nest species
rename(sp = data) %>%
ungroup() %>%
mutate(sp.best = pmap(list(marginal, sp), checksp)) %>%
unnest(sp.best, names_sep = "_") %>%
rowwise() %>%
mutate(sp.union = list(union(unlist(sp), unlist(sp.best_species)))) %>%
mutate(J_group = sp.best_n / length(sp.union)) %>%
ungroup()
t1 <- Sys.time()
J_tmp <- compare_df %>% #filter(web == "stmks") %>%
group_by(marginal, group) %>%
nest() %>% #Nest species
rename(sp = data) %>%
ungroup() %>%
mutate(sp.best = pmap(list(marginal, sp), checksp)) %>%
unnest(sp.best, names_sep = "_") %>%
rowwise() %>%
mutate(sp.union = list(union(unlist(sp), unlist(sp.best_species)))) %>%
mutate(J_group = sp.best_n / length(sp.union)) %>%
ungroup() %>%
rename(mx = marginal, my = sp.best_marginal,
Js = J_group)
t2 <- Sys.time()
t2-t1
J_tmp
J_tmp %>%
group_by(mx, my) %>%
summarise(meanJs = mean(Js)) %>%
filter(mx != my) %>%
webrename() %>%
ggplot() +
aes(x = meanJs) +
geom_histogram(aes(y = after_stat(count / sum(count))), bins = 20) +
scale_y_continuous(labels = c("0%", "25%", "50%", "75%", "100%")) +
#facet_grid(.~web) +
labs(x = "Jaccard similarity", y = "Percentage")
J_tmp %>%
group_by(mx, my) %>%
summarise(meanJs = mean(Js)) %>%
filter(mx != my) %>%
#webrename() %>%
ggplot() +
aes(x = meanJs) +
geom_histogram(aes(y = after_stat(count / sum(count))), bins = 20) +
scale_y_continuous(labels = c("0%", "25%", "50%", "75%", "100%")) +
#facet_grid(.~web) +
labs(x = "Jaccard similarity", y = "Percentage")
